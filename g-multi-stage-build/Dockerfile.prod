FROM node:14-alpine as build

WORKDIR /app

COPY package.json .

RUN npm install

COPY . .

RUN npm run build

FROM nginx:stable-alpine

COPY --from=build /app/build /usr/share/nginx/html

EXPOSE 80

CMD ["nginx", "-g", "daemon off;"]

# Here we are using multi-stage builds. 
# We have two FROM statements meaning that we have two stages and stages can COPY results from each other.

# Stage 1: Here we are using a light weight node image (node:14-alpine) just to build our react application (we don't need the full node image since
# we will only build the application) and with that build all built files will be generated at the /build folder.

# Stage 2: Here we already have the built files so we only need to serve the application through a web server and for that we are using nginx
# with the multi-stage build we can COPY the generated build files and then use them with the nginx image.

# Command:
# docker build -f Dockerfile.prod -t pepematt/goals-react ./frontend (This will not work because I deleted the code)
# The main point here is to know that we can use -f to specify the Dockerfile to be used on the build.